{"version":3,"file":"sentry.interceptor.js","sourceRoot":"/","sources":["sentry.interceptor.ts"],"names":[],"mappings":"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","sourcesContent":["// Nestjs imports\nimport {\n  CallHandler,\n  ExecutionContext,\n  Injectable,\n  NestInterceptor\n} from '@nestjs/common';\nimport {\n  HttpArgumentsHost,\n  WsArgumentsHost,\n  RpcArgumentsHost,\n  ContextType\n} from '@nestjs/common/interfaces';\n// Rxjs imports\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n// Sentry imports\nimport { Scope } from '@sentry/hub';\nimport { Handlers } from '@sentry/node';\n\n// import { InjectSentry } from './sentry.decorator';\nimport { SentryService } from './sentry.service';\nimport { SentryInterceptorOptions, SentryInterceptorOptionsFilter } from './sentry.interfaces';\n\n\n@Injectable()\nexport class SentryInterceptor implements NestInterceptor {\n\n  private client: SentryService = SentryService.SentryServiceInstance()\n  constructor(\n    //@InjectSentry() private readonly client: SentryService,\n    private readonly options?: SentryInterceptorOptions\n  ) {}\n\n  intercept(context: ExecutionContext, next: CallHandler): Observable<any> {\n    // first param would be for events, second is for errors\n    return next.handle().pipe(\n      tap(null, (exception) => {\n        if(this.shouldReport(exception)) {\n          this.client.instance().withScope((scope) => {\n            switch (context.getType<ContextType>()) {\n              case 'http':\n                return this.captureHttpException(\n                  scope,\n                  context.switchToHttp(),\n                  exception\n                );\n              case 'rpc':\n                return this.captureRpcException(\n                  scope,\n                  context.switchToRpc(),\n                  exception,\n                );\n              case 'ws':\n                return this.captureWsException(\n                  scope,\n                  context.switchToWs(),\n                  exception,\n                );\n            }\n          })\n        }\n      })\n    );\n  }\n\n  private captureHttpException(scope: Scope, http: HttpArgumentsHost, exception: any): void {\n    const data = Handlers.parseRequest(<any>{},http.getRequest(), {});\n    const dataRequest = data.request;\n\n    delete dataRequest.cookies;\n    delete dataRequest.headers.cookie;\n\n    scope.setExtra('req', dataRequest);\n\n    if (data.extra) scope.setExtras(data.extra);\n\n    scope.setUser({\n      ...(data.user.userId && {\n        id: data.user.userId,\n      }),\n      ...(data.user.email && {\n        email: data.user.email,\n      }),\n      ip_address: '{{auto}}'\n    })\n\n    this.client.instance().captureException(exception);\n  }\n\n  private captureRpcException(\n    scope: Scope,\n    rpc: RpcArgumentsHost,\n    exception: any,\n  ): void {\n    scope.setExtra('rpc_data', rpc.getData());\n\n    this.client.instance().captureException(exception);\n  }\n\n  private captureWsException(\n    scope: Scope,\n    ws: WsArgumentsHost,\n    exception: any,\n  ): void {\n    scope.setExtra('ws_client', ws.getClient());\n    scope.setExtra('ws_data', ws.getData());\n\n    this.client.instance().captureException(exception);\n  }\n\n  private shouldReport(exception: any) {\n    if (this.options && !this.options.filters) return true;\n\n    // If all filters pass, then we do not report\n    if (this.options) {\n      const opts: SentryInterceptorOptions = this.options as {}\n      if (opts.filters) {\n        let filters: SentryInterceptorOptionsFilter[] = opts.filters\n        return filters.every(({ type, filter }) => {\n          return !(exception instanceof type && (!filter || filter(exception)));\n        });\n      }\n    } else {\n      return true;\n    }\n  }\n}\n"]}